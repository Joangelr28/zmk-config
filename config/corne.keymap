/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

&spi1 {
   compatible = "nordic,nrf-spim";
   status = "okay";
   mosi-pin = <6>;
   // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
   sck-pin = <5>;
   miso-pin = <7>;

   led_strip: ws2812@0 {
      compatible = "worldsemi,ws2812-spi";
      label = "SK6812mini";

      /* SPI */
      reg = <0>; /* ignored, but necessary for SPI bindings */
      spi-max-frequency = <4000000>;

      /* WS2812 */
      chain-length = <6>; /* arbitrary; change at will */
      spi-one-frame = <0x70>;
      spi-zero-frame = <0x40>;
   };
};

/ {
   chosen {
      zmk,underglow = &led_strip;
   };
};

/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk YET
 */

/ {
  keymap {
    compatible = "zmk,keymap";
    default_layer {
    /*
    ** |   ESC   |    ;    |    ,    |    .    |    P    |    Y    | XXX |    F    |    G    |    C    |    H    |    L    |   DEL   |
    ** |   TAB   |    A    |  ALT O  |  CTL E  | SHIFT I |    U    | XXX |    D    | SHIFT R |  CTL T  |  ALT N  |    S    |    -    |
    ** |    \    |    '    |    Q    |    J    |    K    |    X    | XXX |    B    |    M    |    W    |    V    |    Z    |    /    |
    **                               |   WIN   |   MO1   |  SPACE  | XXX |  ENTER  |   MO2   |BACKSPACE|
    */
      bindings = <
        &kp TAB   &kp SEMICOLON    &kp COMMA  &kp DOT     &kp P       &kp Y        &kp F     &kp G       &kp C       &kp H      &kp L &kp DEL
        &kp ESC   &kp A            &mt LALT O &mt LCTRL E &mt LSHFT I &kp U        &kp D     &mt RSHFT R &mt RCTRL T &mt RALT N &kp S &kp MINUS
        &kp BSLH  &kp SINGLE_QUOTE &kp Q      &kp J       &kp K       &kp X        &kp B     &kp M       &kp W       &kp V      &kp Z &kp SLASH
                                              &kp LGUI    &mo 1       &kp SPACE    &kp ENTER &mo 2       &kp BSPC
      >;
    };
    layer_raise {
    /*
    ** |   ESC   |    1    |    2    |    3    |    4    |    5    | XXX |    6    |    7    |    8    |    9    |    0    |   DEL   |
    ** |   TAB   |    &    |  ALT [  |  CTL {  | SHIFT ( |    $    | XXX |    !    | SHIFT ) |  CTL }  |  ALT  ] |    %    |    -    |
    ** |    \    |    @    |         |    *    |    +    |    #    | XXX |    ~    |    =    |    ^    |         |    Ñ    |    /    |
    **                               |   WIN   |_________|  SPACE  | XXX |  ENTER  |   MO3   |BACKSPACE|
    */
      bindings = <
        &kp TAB  &kp N1     &kp N2        &kp N3         &kp N4         &kp N5       &kp N6    &kp N7         &kp N8          &kp N9        &kp N0   &kp DEL
        &kp ETC  &kp AMPS &mt LALT LBKT &mt LCTRL LBRC &mt LSHFT LPAR &kp DOLLAAR    &kp STAR  &mt RSHFT RPAR &mt RCTRL RBRC  &mt RALT RBKT &kp AMPS &kp MINUS
        &kp BSLH &kp AT     &kp GRAVE     &kp CARET      &kp PERCENT    &tog 1       &tog 1    &kp        &kp EXCLAMATION &kp  Ñ        &kp PLUS &kp SLASH
                                          &kp LEFT_WIN   &trans         &kp SPACE    &kp ENTER &mo 3          &kp BSPC
      >;
    };
    layer_lower {
    /*
    ** | ALT F12 |    F1   |    F2   |    F3   |    F4   |    F5   | XXX |    F6   |    F7   |    F8   |    F9   |   F10   | ALT F11 |
    ** | CTL ESC |   HOME  | PG DOWN |  PG UP  |   END   |    =    | XXX |    *    |   LEFT  |   DOWN  |    UP   |  RIGHT  | CTL  -  |
    ** | SHIFT \ |   CUT   |   COPY  |  PASTE  |         |   TOG2  | XXX |   TOG2  |  PRTSC  |   UNDO  |   REDO  |    +    | SHIFT / |
    **                               |   WIN   |   MO3   |  SPACE  | XXX |  ENTER  |_________|BACKSPACE|
    */
      bindings = <
        &mt LALT F12          &kp F1      &kp F2     &kp F3        &kp F4       &kp F5         &kp F6     &kp F7    &kp F8           &kp F19   &kp F10   &mt RALT F11
        &mt LCTRL ESC        &kp HOME   &kp PAGE_DOWN  &kp PG_UP     &kp END  &kp EQUAL      &kp STAR   &kp LEFT         &kp DOWN    &kp UP      &kp RIGHT  &mt RCTRL MINUS
        &mt LSHFT BACKSLASH  &kp K_CUT  &kp K_COPY     &kp K_PASTE   &trans   &tog 2         &tog 2     &kp PRINTSCREEN  &kp K_UNDO  &kp K_REDO  &kp PLUS   &mt RSHFT SLASH
                                                       &kp LEFT_WIN  &mo 3    &kp SPACE      &kp ENTER  &trans           &kp BSPC
      >;
    };
    layer_SETTINGS {
    /*
    ** |         |         |         |  VOL UP |  BRI UP |         | XXX |         | BT PREV |  BT SEL |  BT CLR | BT NEXT |         |
    ** |         |         |         |  VOL AU |  BRI AU |         | XXX |         |  K PREV |   PLAY  |   STOP  |  K NEXT |         |
    ** |         |         |         | VOLDOWN | BRIDOWN |         | XXX |         |         |         |         |         |         |
    **                               |         |_________|         | XXX |         |_________|         |
    */
      bindings = <
        &trans  &trans  &trans  &kp K_VOL_UP  &kp C_BRI_UP    &trans      &trans  &bt BT_PRV  &bt BT_SEL        &bt BT_CLR  &bt BT_NXT  &trans
        &trans  &trans  &trans  &kp K_MUTE    &kp C_BRI_AUTO  &trans      &trans  &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_STOP  &kp K_NEXT  &trans
        &trans  &trans  &trans  &kp K_VOL_DN  &kp C_BRI_UP    &trans      &trans  &trans      &trans            &trans      &trans      &trans
                                &trans        &trans          &trans      &trans  &trans      &trans
      >;
    };
  };
};
