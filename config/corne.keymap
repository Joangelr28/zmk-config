#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

&spi1 {
	compatible = "nordic,nrf-spim";
	/* Cannot be used together with i2c0. */
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "SK6812mini";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <27>; /* There are per-key RGB, but the first 6 are underglow */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

/ {
    keymap {
    compatible = "zmk,keymap";
    default_layer {
      // |   ESC   |    ,    |    .    |    '    |    P    |    Y    | XXX |    F    |    H    |    J    |    K    |    L    |   DEL   |
      // |   TAB   |    A    |  ALT O  |  CTL E  | SHIFT I |    U    | XXX |    D    | SHIFT R |  CTL T  |  ALT N  |    S    |    -    |
      // |    \    |    ;    |    Q    |    G    |    C    |    X    | XXX |    B    |    M    |    W    |    V    |    Z    |    /    |
      //                               |   WIN   |   MO1   |  SPACE  | XXX |  ENTER  |   MO2   |BACKSPACE|
      bindings = <
        &kp ESC   &kp COMMA &kp DOT    &kp SQT     &kp P       &kp Y       &kp F     &kp H       &kp J       &kp K      &kp L &kp DEL
        &kp TAB   &kp A     &mt LALT O &mt LCTRL E &mt LSHFT I &kp U       &kp D     &mt RSHFT R &mt RCTRL T &mt RALT N &kp S &kp MINUS
        &kp BSLH  &kp SEMI  &kp Q      &kp G       &kp C       &kp X       &kp B     &kp M       &kp W       &kp V      &kp Z &kp SLASH
                                       &kp LGUI    &mo 1       &kp SPACE   &kp ENTER &mo 2       &kp BSPC
      >;
    };
    lower_layer {
    // |   ESC   |    1    |    2    |    3    |    4    |    5    | XXX |    6    |    7    |    8    |    9    |    0    |   DEL   |
    // |   TAB   |    &    |  ALT [  |  CTL {  | SHIFT ( |    $    | XXX |    !    | SHIFT ) |  CTL }  |  ALT  ] |    %    |    -    |
    // |    \    |    @    |         |    *    |    +    |    #    | XXX |    ~    |    =    |    ^    |         |    Ã‘    |    /    |
    //                               |   WIN   |_________|  SPACE  | XXX |  ENTER  |   MO3   |BACKSPACE|
      bindings = <
        &trans &kp N1   &kp N2        &kp N3         &kp N4         &kp N5       &kp N6    &kp N7         &kp N8         &kp N9        &kp N0    &trans
        &trans &kp AMPS &mt LALT LBKT &mt LCTRL LBRC &mt LSHFT LPAR &kp DOLLAR   &kp EXCL  &mt RSHFT RPAR &mt RCTRL RBRC &mt RALT RBKT &kp PRCNT &trans
        &trans &kp AT   &none         &kp STAR       &kp PLUS       &kp HASH     &kp TILDE &kp EQUAL      &kp CARET      &none         &kp N     &trans
                                      &trans         &trans         &trans       &trans    &mo 3          &trans
      >;
    };
    raise_layer {
    // |         |         |         |         |  PASTE  |   COPY  | XXX |         |   LEFT  |   DOWN  |    UP   |  RIGHT  |         |
    // |         |   HOME  | PG DOWN |  PG UP  |   END   |   UNDO  | XXX |   CUT   |   REDO  |         |         |  PrtScr |         |
    // |    F1   |    F2   |    F3   |    F4   |    F5   |    F6   | XXX |    F7   |    F8   |    F9   |   F10   |   F11   |   F12   |
    //                               |   WIN   |   MO3   |  SPACE  | XXX |  ENTER  |_________|BACKSPACE|
      bindings = <
        &none  &none     &none     &none     &kp K_PASTE &kp K_COPY   &none     &kp LEFT   &kp DOWN &kp UP  &kp RIGHT &none
        &none  &kp HOME  &kp PG_DN &kp PG_UP &kp END     &kp K_UNDO   &kp K_CUT &kp K_REDO &none    &none   &kp PSCRN &none
        &kp F1 &kp F2    &kp F3    &kp F4    &kp F5      &kp F6       &kp F7    &kp F8     &kp F9   &kp F10 &kp F11   &kp F12
                                   &trans    &trans      &trans       &trans    &trans     &trans
      >;
    };
    settings_layer {
    /*
    ** | RGB HUI |         |         |  VOL UP |  BRI UP | RGB BDI | XXX | RGB BDI |         | BT PREV |  BT CLR | BT NEXT | RGB HUI |
    ** | RGB HUD |         |         | VOL MTE |  BRI AU | RGB TOG | XXX | RGB TOG |  K PREV |   PLAY  |   STOP  |  K NEXT | RGB HUD |
    ** | RGB EFF |         |         | VOLDOWN | BRIDOWN | RGB BRD | XXX | RGB BRD | BT_SEL0 | BT_SEL0 | BT_SEL0 | BT_SEL0 | RGB EFF |
    **                               |         |_________|         | XXX |         |_________|         |
    */
      bindings = <
        &rgb_ug RGB_HUI &none &none &kp K_VOL_UP &kp C_BRI_UP   &rgb_ug RGB_BRI   &rgb_ug RGB_BRI &none        &bt BT_PRV       &bt BT_CLR   &bt BT_NXT   &rgb_ug RGB_HUI
        &rgb_ug RGB_HUD &none &none &kp K_MUTE   &kp C_BRI_AUTO &rgb_ug RGB_TOG   &rgb_ug RGB_TOG &kp K_PREV   &kp K_PLAY_PAUSE &kp K_STOP   &kp K_NEXT   &rgb_ug RGB_HUD
        &rgb_ug RGB_EFF &none &none &kp K_VOL_DN &kp C_BRI_UP   &rgb_ug RGB_BRD   &rgb_ug RGB_BRD &bt BT_SEL 0 &bt BT_SEL 1     &bt BT_SEL 2 &bt BT_SEL 3 &rgb_ug RGB_EFF
                                    &none        &trans         &none             &none           &trans       &none
      >;
    };
  };
};
